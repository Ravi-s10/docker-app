def application
def gitRepo

pipeline {

  agent any 
parameters {
  string(
    name: 'HOST_PORT_VALUE',
    defaultValue: ''
  )
  string(
     name: 'CONTAINER_PORT_VALUE',
    defaultValue: ''
  )
  string(
     name: 'NAME_VALUE'',
    defaultValue: ''
  )

 string(
     name: 'IMAGE'',
    defaultValue: ''
  )

  
}
  
environment {
DOCKERHUBCRED = credentials('DOCKERHUB')
}
  stages{

stage("Read Properties file") {
steps{
script {
props = readProperties file: "devops/ci/pipeline.properties"
  application = evaluate(props['application']).toString()
  gitRepo = evaluate(props['gitRepo']).toString()

}
}
}
    stage("Source Code Fetch") {
steps {
script {
  checkout scmGit(branches: [[name: '**']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/Ravi-s10/docker-app']])
//checkout([$class: 'gitSCM' ,branches: [["${GIT_BRANCH}"]] ,gitTool: 'Default' ,userRemoteConfigs: [[url = "${gitRepo}"]]])

}
  

}

    }
/*
   stage("Build Docker image"){
  steps{
                     
 sh "docker build -t ${application}_${BUILD_NUMBER} ."
                     
 }
}

    stage("Login to Dockerhub") {
steps{
  sh "echo $DOCKERHUBCRED | docker login -u ravis10 --password-stdin"
  echo "Login Success"
}

    }
    */

    stage("Buidl and Push") {
steps{
script{
withDockerRegistry(credentialsId: 'dockehub'){
  sh "docker build -t ravis10/nginx:${BUILD_NUMBER} ."
  sh "docker push ravis10/nginx:${BUILD_NUMBER}"
}
}
}
    }

    stage("Trigger CD Job"){
      steps{
                build job: 'docker-cd', parameters: [string(name: 'HOST_PORT', value: "${HOST_PORT_VALUE}"), string(name: 'CONTAINER_PORT', value: "${CONTAINER_PORT_VALUE}"), string(name: 'IMAGE', value: "${IMAGE_VALUE}"), string(name: 'NAME', value: "${NAME_VALUE}")]

//        build job: 'docker-cd', parameters: [string(name: 'HOST_PORT', value: '83'), string(name: 'CONTAINER_PORT', value: '80'), string(name: 'IMAGE', value: 'ravis10/nginx:5'), string(name: 'NAME', value: 'nginx-demo')]
      }
    }



  }
  
}
